<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lol/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lol/MainActivity.kt" />
              <option name="originalContent" value="package com.example.lol&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.example.lol.ui.navigation.AppNavHost&#10;import com.example.lol.ui.navigation.BottomNavItem&#10;import com.example.lol.ui.theme.LOLTheme&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.School&#10;import androidx.compose.material.icons.filled.List&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.room.Room&#10;import com.example.lol.data.AppDatabase&#10;import com.example.lol.data.SubjectRepository&#10;import com.example.lol.repository.TimetableRepository&#10;import com.example.lol.viewmodel.TimetableViewModel&#10;import com.example.lol.viewmodel.TimetableViewModelFactory&#10;import androidx.compose.runtime.remember&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            LOLTheme {&#10;                val navController = rememberNavController()&#10;                val context = this&#10;                val db = remember {&#10;                    Room.databaseBuilder(&#10;                        context.applicationContext,&#10;                        AppDatabase::class.java,&#10;                        &quot;attendance_db&quot;&#10;                    )&#10;                    .fallbackToDestructiveMigration()&#10;                    .build()&#10;                }&#10;                val repository = remember { SubjectRepository(db.subjectDao()) }&#10;                val timetableRepository = remember { TimetableRepository(db.timetableDao()) }&#10;                val timetableViewModel: TimetableViewModel = androidx.lifecycle.viewmodel.compose.viewModel(&#10;                    factory = TimetableViewModelFactory(timetableRepository)&#10;                )&#10;                val items = listOf(&#10;                    BottomNavItem.Home,&#10;                    BottomNavItem.Subjects,&#10;                    BottomNavItem.Timetable,&#10;                    BottomNavItem.CommonSlots&#10;                )&#10;                val commonSlotViewModel: com.example.lol.viewmodel.CommonSlotViewModel = androidx.lifecycle.viewmodel.compose.viewModel()&#10;                // Always call insertDefaultSlotsIfEmpty; it only inserts if table is empty&#10;                commonSlotViewModel.insertDefaultSlotsIfEmpty()&#10;                val attendanceRepository = remember { com.example.lol.repository.AttendanceRepository(db.attendanceDao(), db.subjectDao()) }&#10;                val attendanceViewModel = remember { com.example.lol.viewmodel.AttendanceViewModel(attendanceRepository) }&#10;                Scaffold(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    bottomBar = {&#10;                        NavigationBar {&#10;                            val currentRoute = navController.currentBackStackEntry?.destination?.route&#10;                            items.forEach { item -&gt;&#10;                                NavigationBarItem(&#10;                                    icon = { Icon(item.icon, contentDescription = item.label) },&#10;                                    label = { Text(item.label) },&#10;                                    selected = currentRoute == item.route,&#10;                                    onClick = {&#10;                                        if (currentRoute != item.route) {&#10;                                            navController.navigate(item.route) {&#10;                                                popUpTo(navController.graph.startDestinationId) { saveState = true }&#10;                                                launchSingleTop = true&#10;                                                restoreState = true&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                ) { innerPadding -&gt;&#10;                    AppNavHost(&#10;                        navController = navController,&#10;                        repository = repository,&#10;                        timetableViewModel = timetableViewModel,&#10;                        commonSlotViewModel = commonSlotViewModel,&#10;                        attendanceViewModel = attendanceViewModel,&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lol&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.example.lol.ui.navigation.AppNavHost&#10;import com.example.lol.ui.navigation.BottomNavItem&#10;import com.example.lol.ui.theme.LOLTheme&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.School&#10;import androidx.compose.material.icons.filled.List&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.room.Room&#10;import com.example.lol.data.AppDatabase&#10;import com.example.lol.data.SubjectRepository&#10;import com.example.lol.repository.TimetableRepository&#10;import com.example.lol.viewmodel.TimetableViewModel&#10;import com.example.lol.viewmodel.TimetableViewModelFactory&#10;import androidx.compose.runtime.remember&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            LOLTheme {&#10;                val navController = rememberNavController()&#10;                val context = this&#10;                val db = remember {&#10;                    Room.databaseBuilder(&#10;                        context.applicationContext,&#10;                        AppDatabase::class.java,&#10;                        &quot;attendance_db&quot;&#10;                    )&#10;                    .fallbackToDestructiveMigration()&#10;                    .build()&#10;                }&#10;                val repository = remember { SubjectRepository(db.subjectDao()) }&#10;                val timetableRepository = remember { TimetableRepository(db.timetableDao()) }&#10;                val timetableViewModel: TimetableViewModel = androidx.lifecycle.viewmodel.compose.viewModel(&#10;                    factory = TimetableViewModelFactory(timetableRepository)&#10;                )&#10;                val items = listOf(&#10;                    BottomNavItem.Home,&#10;                    BottomNavItem.Subjects,&#10;                    BottomNavItem.Timetable,&#10;                    BottomNavItem.CommonSlots&#10;                )&#10;                val commonSlotViewModel: com.example.lol.viewmodel.CommonSlotViewModel = androidx.lifecycle.viewmodel.compose.viewModel()&#10;                // Always call insertDefaultSlotsIfEmpty; it only inserts if table is empty&#10;                commonSlotViewModel.insertDefaultSlotsIfEmpty()&#10;                val attendanceRepository = remember { com.example.lol.repository.AttendanceRepository(db.attendanceDao(), db.subjectDao(), repository) }&#10;                val attendanceViewModel = remember { com.example.lol.viewmodel.AttendanceViewModel(attendanceRepository) }&#10;                Scaffold(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    bottomBar = {&#10;                        NavigationBar {&#10;                            val currentRoute = navController.currentBackStackEntry?.destination?.route&#10;                            items.forEach { item -&gt;&#10;                                NavigationBarItem(&#10;                                    icon = { Icon(item.icon, contentDescription = item.label) },&#10;                                    label = { Text(item.label) },&#10;                                    selected = currentRoute == item.route,&#10;                                    onClick = {&#10;                                        if (currentRoute != item.route) {&#10;                                            navController.navigate(item.route) {&#10;                                                popUpTo(navController.graph.startDestinationId) { saveState = true }&#10;                                                launchSingleTop = true&#10;                                                restoreState = true&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                ) { innerPadding -&gt;&#10;                    AppNavHost(&#10;                        navController = navController,&#10;                        repository = repository,&#10;                        timetableViewModel = timetableViewModel,&#10;                        commonSlotViewModel = commonSlotViewModel,&#10;                        attendanceViewModel = attendanceViewModel,&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lol/repository/AttendanceRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lol/repository/AttendanceRepository.kt" />
              <option name="originalContent" value="package com.example.lol.repository&#10;import com.example.lol.data.Attendance&#10;import com.example.lol.data.AttendanceDao&#10;import com.example.lol.data.AttendanceStatus&#10;import com.example.lol.data.SubjectRepository&#10;import com.example.lol.data.SubjectDao&#10;import com.example.lol.data.Subject&#10;&#10;class AttendanceRepository(private val attendanceDao: AttendanceDao, private val subjectDao: SubjectDao) {&#10;    suspend fun markAttendanceForSlot(subjectId: Int, slotId: Int, date: String, status: AttendanceStatus) {&#10;        val attendance = Attendance(subjectId = subjectId, slotId = slotId, date = date, status = status)&#10;        attendanceDao.insertAttendance(attendance)&#10;    }&#10;&#10;    suspend fun deleteAllAttendanceForSubject(subjectId: Int) {&#10;        attendanceDao.deleteAllForSubject(subjectId)&#10;    }&#10;&#10;    suspend fun getSubjectById(subjectId: Int): Subject? {&#10;        return subjectDao.getSubjectById(subjectId)&#10;    }&#10;    &#10;    suspend fun addManualHistory(subjectId: Int, date: String, note: String) {&#10;        val manual = Attendance(subjectId = subjectId, slotId = -1, date = date, status = AttendanceStatus.PRESENT, note = note)&#10;        attendanceDao.insertManualHistory(manual)&#10;    }&#10;&#10;    suspend fun updateSubjectAttendance(subjectId: Int, attended: Int, total: Int) {&#10;        val subject = subjectDao.getSubjectById(subjectId)&#10;        if (subject != null) {&#10;            val updated = subject.copy(attendedClasses = attended, totalClasses = total)&#10;            subjectDao.updateSubject(updated)&#10;            // Notify SubjectRepository to refresh subjects&#10;            SubjectRepository(subjectDao).refreshSubjects()&#10;        }&#10;    }&#10;&#10;    suspend fun getAttendanceHistory(subjectId: Int) = attendanceDao.getAttendanceForSubject(subjectId)&#10;&#10;    suspend fun getAttendanceForDate(subjectId: Int, date: String) = attendanceDao.getAttendanceForSubjectOnDate(subjectId, date)&#10;&#10;    suspend fun getAttendancePercentage(subjectId: Int): Double {&#10;        val total = attendanceDao.getTotalMarked(subjectId)&#10;        if (total == 0) return 0.0&#10;        val present = attendanceDao.getCountByStatus(subjectId, AttendanceStatus.PRESENT)&#10;        return (present.toDouble() / total) * 100&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lol.repository&#10;import com.example.lol.data.Attendance&#10;import com.example.lol.data.AttendanceDao&#10;import com.example.lol.data.AttendanceStatus&#10;import com.example.lol.data.SubjectRepository&#10;import com.example.lol.data.SubjectDao&#10;import com.example.lol.data.Subject&#10;&#10;class AttendanceRepository(&#10;    private val attendanceDao: AttendanceDao,&#10;    private val subjectDao: SubjectDao,&#10;    private val subjectRepository: SubjectRepository // Injected shared instance&#10;) {&#10;    suspend fun markAttendanceForSlot(subjectId: Int, slotId: Int, date: String, status: AttendanceStatus) {&#10;        val attendance = Attendance(subjectId = subjectId, slotId = slotId, date = date, status = status)&#10;        attendanceDao.insertAttendance(attendance)&#10;    }&#10;&#10;    suspend fun deleteAllAttendanceForSubject(subjectId: Int) {&#10;        attendanceDao.deleteAllForSubject(subjectId)&#10;    }&#10;&#10;    suspend fun getSubjectById(subjectId: Int): Subject? {&#10;        return subjectDao.getSubjectById(subjectId)&#10;    }&#10;    &#10;    suspend fun addManualHistory(subjectId: Int, date: String, note: String) {&#10;        val manual = Attendance(subjectId = subjectId, slotId = -1, date = date, status = AttendanceStatus.PRESENT, note = note)&#10;        attendanceDao.insertManualHistory(manual)&#10;    }&#10;&#10;    suspend fun updateSubjectAttendance(subjectId: Int, attended: Int, total: Int) {&#10;        val subject = subjectDao.getSubjectById(subjectId)&#10;        if (subject != null) {&#10;            val updated = subject.copy(attendedClasses = attended, totalClasses = total)&#10;            subjectDao.updateSubject(updated)&#10;            // Notify shared SubjectRepository to refresh subjects&#10;            subjectRepository.refreshSubjects()&#10;        }&#10;    }&#10;&#10;    suspend fun getAttendanceHistory(subjectId: Int) = attendanceDao.getAttendanceForSubject(subjectId)&#10;&#10;    suspend fun getAttendanceForDate(subjectId: Int, date: String) = attendanceDao.getAttendanceForSubjectOnDate(subjectId, date)&#10;&#10;    suspend fun getAttendancePercentage(subjectId: Int): Double {&#10;        val total = attendanceDao.getTotalMarked(subjectId)&#10;        if (total == 0) return 0.0&#10;        val present = attendanceDao.getCountByStatus(subjectId, AttendanceStatus.PRESENT)&#10;        return (present.toDouble() / total) * 100&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>