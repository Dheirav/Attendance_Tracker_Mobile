<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/attendance_tracker/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/attendance_tracker/MainActivity.kt" />
              <option name="originalContent" value="package com.example.attendance_tracker&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.attendance_tracker.ui.navigation.AppNavHost&#10;import com.example.attendance_tracker.ui.navigation.BottomNavItem&#10;import com.example.attendance_tracker.ui.theme.LOLTheme&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.room.Room&#10;import com.example.attendance_tracker.data.AppDatabase&#10;import com.example.attendance_tracker.data.SubjectRepository&#10;import com.example.attendance_tracker.repository.TimetableRepository&#10;import com.example.attendance_tracker.viewmodel.TimetableViewModel&#10;import com.example.attendance_tracker.viewmodel.TimetableViewModelFactory&#10;import androidx.compose.runtime.remember&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            LOLTheme {&#10;                val navController = rememberNavController()&#10;                val context = this&#10;                val db = remember {&#10;                    Room.databaseBuilder(&#10;                        context.applicationContext,&#10;                        AppDatabase::class.java,&#10;                        &quot;attendance_db&quot;&#10;                    )&#10;                    .fallbackToDestructiveMigration()&#10;                    .build()&#10;                }&#10;                val repository = remember { SubjectRepository(db.subjectDao()) }&#10;                val timetableRepository = remember { TimetableRepository(db.timetableDao()) }&#10;                val timetableViewModel: TimetableViewModel = androidx.lifecycle.viewmodel.compose.viewModel(&#10;                    factory = TimetableViewModelFactory(timetableRepository)&#10;                )&#10;                val items = listOf(&#10;                    BottomNavItem.Home,&#10;                    BottomNavItem.Subjects,&#10;                    BottomNavItem.Timetable,&#10;                    BottomNavItem.CommonSlots&#10;                )&#10;                val commonSlotViewModel: com.example.attendance_tracker.viewmodel.CommonSlotViewModel = androidx.lifecycle.viewmodel.compose.viewModel()&#10;                // Always call insertDefaultSlotsIfEmpty; it only inserts if table is empty&#10;                commonSlotViewModel.insertDefaultSlotsIfEmpty()&#10;                val attendanceRepository = remember { com.example.attendance_tracker.repository.AttendanceRepository(db.attendanceDao(), db.subjectDao(), repository) }&#10;                val attendanceViewModel = remember { com.example.attendance_tracker.viewmodel.AttendanceViewModel(attendanceRepository) }&#10;                Scaffold(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    bottomBar = {&#10;                        NavigationBar {&#10;                            val currentRoute = navController.currentBackStackEntry?.destination?.route&#10;                            items.forEach { item -&gt;&#10;                                NavigationBarItem(&#10;                                    icon = { Icon(item.icon, contentDescription = item.label) },&#10;                                    label = { Text(item.label) },&#10;                                    selected = currentRoute == item.route,&#10;                                    onClick = {&#10;                                        if (currentRoute != item.route) {&#10;                                            navController.navigate(item.route) {&#10;                                                popUpTo(navController.graph.startDestinationId) { saveState = true }&#10;                                                launchSingleTop = true&#10;                                                restoreState = true&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                ) { innerPadding -&gt;&#10;                    AppNavHost(&#10;                        navController = navController,&#10;                        repository = repository,&#10;                        timetableViewModel = timetableViewModel,&#10;                        commonSlotViewModel = commonSlotViewModel,&#10;                        attendanceViewModel = attendanceViewModel,&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.attendance_tracker&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.attendance_tracker.ui.navigation.AppNavHost&#10;import com.example.attendance_tracker.ui.navigation.BottomNavItem&#10;import com.example.attendance_tracker.ui.theme.LOLTheme&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.room.Room&#10;import com.example.attendance_tracker.data.AppDatabase&#10;import com.example.attendance_tracker.data.SubjectRepository&#10;import com.example.attendance_tracker.repository.TimetableRepository&#10;import com.example.attendance_tracker.viewmodel.TimetableViewModel&#10;import com.example.attendance_tracker.viewmodel.TimetableViewModelFactory&#10;import androidx.compose.runtime.remember&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            LOLTheme {&#10;                val navController = rememberNavController()&#10;                val context = this&#10;                val db = remember {&#10;                    Room.databaseBuilder(&#10;                        context.applicationContext,&#10;                        AppDatabase::class.java,&#10;                        &quot;attendance_db&quot;&#10;                    )&#10;                    .fallbackToDestructiveMigration()&#10;                    .build()&#10;                }&#10;                val repository = remember { SubjectRepository(db.subjectDao()) }&#10;                val timetableRepository = remember { TimetableRepository(db.timetableDao()) }&#10;                val timetableViewModel: TimetableViewModel = androidx.lifecycle.viewmodel.compose.viewModel(&#10;                    factory = TimetableViewModelFactory(timetableRepository)&#10;                )&#10;                val items = listOf(&#10;                    BottomNavItem.Home,&#10;                    BottomNavItem.Subjects,&#10;                    BottomNavItem.Timetable,&#10;                    BottomNavItem.CommonSlots&#10;                )&#10;                val commonSlotViewModel: com.example.attendance_tracker.viewmodel.CommonSlotViewModel = androidx.lifecycle.viewmodel.compose.viewModel()&#10;                // Always call insertDefaultSlotsIfEmpty; it only inserts if table is empty&#10;                commonSlotViewModel.insertDefaultSlotsIfEmpty()&#10;                val attendanceRepository = remember { com.example.attendance_tracker.repository.AttendanceRepository(db.attendanceDao(), db.subjectDao(), repository, timetableRepository) }&#10;                val attendanceViewModel = remember { com.example.attendance_tracker.viewmodel.AttendanceViewModel(attendanceRepository) }&#10;                Scaffold(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    bottomBar = {&#10;                        NavigationBar {&#10;                            val currentRoute = navController.currentBackStackEntry?.destination?.route&#10;                            items.forEach { item -&gt;&#10;                                NavigationBarItem(&#10;                                    icon = { Icon(item.icon, contentDescription = item.label) },&#10;                                    label = { Text(item.label) },&#10;                                    selected = currentRoute == item.route,&#10;                                    onClick = {&#10;                                        if (currentRoute != item.route) {&#10;                                            navController.navigate(item.route) {&#10;                                                popUpTo(navController.graph.startDestinationId) { saveState = true }&#10;                                                launchSingleTop = true&#10;                                                restoreState = true&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                ) { innerPadding -&gt;&#10;                    AppNavHost(&#10;                        navController = navController,&#10;                        repository = repository,&#10;                        timetableViewModel = timetableViewModel,&#10;                        commonSlotViewModel = commonSlotViewModel,&#10;                        attendanceViewModel = attendanceViewModel,&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/attendance_tracker/data/AttendanceDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/attendance_tracker/data/AttendanceDao.kt" />
              <option name="originalContent" value="package com.example.attendance_tracker.data&#10;&#10;import androidx.room.*&#10;&#10;@Dao&#10;interface AttendanceDao {&#10;    @Query(&quot;DELETE FROM attendance WHERE subjectId = :subjectId&quot;)&#10;    suspend fun deleteAllForSubject(subjectId: Int)&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertAttendance(attendance: Attendance)&#10;&#10;    @Query(&quot;SELECT * FROM attendance WHERE subjectId = :subjectId AND slotId = :slotId ORDER BY date DESC&quot;)&#10;    suspend fun getAttendanceForSlot(subjectId: Int, slotId: Int): List&lt;Attendance&gt;&#10;&#10;    // Insert manual update history&#10;    @Insert&#10;    suspend fun insertManualHistory(attendance: Attendance)&#10;&#10;    @Query(&quot;SELECT * FROM attendance WHERE subjectId = :subjectId ORDER BY date DESC&quot;)&#10;    suspend fun getAttendanceForSubject(subjectId: Int): List&lt;Attendance&gt;&#10;&#10;    @Query(&quot;SELECT * FROM attendance WHERE subjectId = :subjectId AND date = :date LIMIT 1&quot;)&#10;    suspend fun getAttendanceForSubjectOnDate(subjectId: Int, date: String): Attendance?&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM attendance WHERE subjectId = :subjectId AND status = :status&quot;)&#10;    suspend fun getCountByStatus(subjectId: Int, status: AttendanceStatus): Int&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM attendance WHERE subjectId = :subjectId&quot;)&#10;    suspend fun getTotalMarked(subjectId: Int): Int&#10;" />
              <option name="updatedContent" value="package com.example.attendance_tracker.data&#13;&#10;&#13;&#10;import androidx.room.*&#13;&#10;&#13;&#10;@Dao&#13;&#10;interface AttendanceDao {&#13;&#10;    @Query(&quot;DELETE FROM attendance WHERE subjectId = :subjectId&quot;)&#13;&#10;    suspend fun deleteAllForSubject(subjectId: Int)&#13;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#13;&#10;    suspend fun insertAttendance(attendance: Attendance)&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM attendance WHERE subjectId = :subjectId AND slotId = :slotId ORDER BY date DESC&quot;)&#13;&#10;    suspend fun getAttendanceForSlot(subjectId: Int, slotId: Int): List&lt;Attendance&gt;&#13;&#10;&#13;&#10;    // Insert manual update history&#13;&#10;    @Insert&#13;&#10;    suspend fun insertManualHistory(attendance: Attendance)&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM attendance WHERE subjectId = :subjectId ORDER BY date DESC&quot;)&#13;&#10;    suspend fun getAttendanceForSubject(subjectId: Int): List&lt;Attendance&gt;&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM attendance WHERE subjectId = :subjectId AND date = :date LIMIT 1&quot;)&#13;&#10;    suspend fun getAttendanceForSubjectOnDate(subjectId: Int, date: String): Attendance?&#13;&#10;&#13;&#10;    @Query(&quot;SELECT COUNT(*) FROM attendance WHERE subjectId = :subjectId AND status = :status&quot;)&#13;&#10;    suspend fun getCountByStatus(subjectId: Int, status: AttendanceStatus): Int&#13;&#10;&#13;&#10;    @Query(&quot;SELECT COUNT(*) FROM attendance WHERE subjectId = :subjectId&quot;)&#13;&#10;    suspend fun getTotalMarked(subjectId: Int): Int&#13;&#10;&#13;&#10;    @Query(&quot;DELETE FROM attendance WHERE subjectId = :subjectId AND date = :date&quot;)&#13;&#10;    suspend fun deleteAttendanceForSubjectOnDate(subjectId: Int, date: String)&#13;&#10;&#13;&#10;    @Query(&quot;UPDATE attendance SET status = :status WHERE subjectId = :subjectId AND date = :date&quot;)&#13;&#10;    suspend fun updateAttendanceStatusForSubjectOnDate(subjectId: Int, date: String, status: AttendanceStatus)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/attendance_tracker/ui/components/TimetableEntryCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/attendance_tracker/ui/components/TimetableEntryCard.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/attendance_tracker/ui/screens/SubjectsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/attendance_tracker/ui/screens/SubjectsScreen.kt" />
              <option name="originalContent" value="package com.example.attendance_tracker.ui.screens&#10;&#10;import android.graphics.Paint&#10;import android.graphics.pdf.PdfDocument&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.material.icons.filled.Download&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.attendance_tracker.data.*&#10;import com.example.attendance_tracker.ui.components.AddOrEditSubjectDialog&#10;import com.example.attendance_tracker.viewmodel.SubjectViewModel&#10;import com.example.attendance_tracker.viewmodel.SubjectViewModelFactory&#10;import com.example.attendance_tracker.viewmodel.AttendanceViewModel&#10;import kotlinx.coroutines.launch&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.util.Locale&#10;import org.apache.poi.xssf.usermodel.XSSFWorkbook&#10;import org.apache.poi.ss.usermodel.CellType&#10;import org.apache.poi.ss.usermodel.Row&#10;import java.time.LocalDateTime&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SubjectsScreen(&#10;    repository: SubjectRepository,&#10;    attendanceViewModel: AttendanceViewModel&#10;) {&#10;    val context = LocalContext.current&#10;    val viewModel: SubjectViewModel = viewModel(factory = SubjectViewModelFactory(repository))&#10;    val subjects by viewModel.subjects.collectAsState()&#10;    var showDialog by remember { mutableStateOf(false) }&#10;    var showEditDialog by remember { mutableStateOf(false) }&#10;    var editingSubject by remember { mutableStateOf&lt;Subject?&gt;(null) }&#10;    var attendedClasses by remember { mutableStateOf(0) }&#10;    var totalClasses by remember { mutableStateOf(0) }&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val dateFormatter = DateTimeFormatter.ofPattern(&quot;dd-MM-yyyy&quot;, Locale.getDefault())&#10;    val today = LocalDate.now().format(dateFormatter)&#10;&#10;    // Search bar state&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val filteredSubjects = subjects.filter { it.name.contains(searchQuery, ignoreCase = true) }&#10;&#10;    LaunchedEffect(errorMessage) {&#10;        errorMessage?.let {&#10;            snackbarHostState.showSnackbar(it)&#10;            errorMessage = null&#10;        }&#10;    }&#10;&#10;    // Export state&#10;    var showExportDialog by remember { mutableStateOf(false) }&#10;    var selectedExportType by remember { mutableStateOf(&quot;CSV&quot;) }&#10;    val exportTypes = listOf(&quot;CSV&quot;, &quot;Excel&quot;, &quot;PDF&quot;)&#10;&#10;    // Export launchers&#10;    val exportCsvLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.CreateDocument(&quot;text/csv&quot;),&#10;        onResult = { uri: android.net.Uri? -&gt;&#10;            if (uri != null) {&#10;                coroutineScope.launch {&#10;                    val csv = buildCsv(filteredSubjects)&#10;                    context.contentResolver.openOutputStream(uri)?.use { it.write(csv.toByteArray()) }&#10;                }&#10;            }&#10;        }&#10;    )&#10;    val exportExcelLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.CreateDocument(&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;),&#10;        onResult = { uri: android.net.Uri? -&gt;&#10;            if (uri != null) {&#10;                coroutineScope.launch {&#10;                    val excelBytes = buildExcel(filteredSubjects)&#10;                    context.contentResolver.openOutputStream(uri)?.use { it.write(excelBytes) }&#10;                }&#10;            }&#10;        }&#10;    )&#10;    val exportPdfLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.CreateDocument(&quot;application/pdf&quot;),&#10;        onResult = { uri: android.net.Uri? -&gt;&#10;            if (uri != null) {&#10;                coroutineScope.launch {&#10;                    val pdfBytes = buildPdf(context, filteredSubjects)&#10;                    context.contentResolver.openOutputStream(uri)?.use { it.write(pdfBytes) }&#10;                }&#10;            }&#10;        }&#10;    )&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Subjects&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* Handle back navigation */ }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { showDialog = true }) {&#10;                        Icon(Icons.Default.Add, contentDescription = &quot;Add Subject&quot;)&#10;                    }&#10;                    IconButton(onClick = { showExportDialog = true }) {&#10;                        Icon(Icons.Default.Download, contentDescription = &quot;Export&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(hostState = snackbarHostState) }&#10;    ) { innerPadding -&gt;&#10;        Column(modifier = Modifier.fillMaxSize().padding(innerPadding)) {&#10;            // Search bar&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Search Subjects&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(8.dp),&#10;                shape = MaterialTheme.shapes.medium, // Rounded rectangle shape&#10;                singleLine = true // Single-line input for a sleek look&#10;            )&#10;&#10;            if (filteredSubjects.isEmpty()) {&#10;                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;No subjects found.&quot;)&#10;                }&#10;            } else {&#10;                LazyColumn(modifier = Modifier.fillMaxSize()) {&#10;                    items(filteredSubjects) { subject -&gt;&#10;                        SubjectCard(&#10;                            subject = subject,&#10;                            viewModel = viewModel,&#10;                            attendanceViewModel = attendanceViewModel,&#10;                            today = today,&#10;                            attendanceHistory = attendanceViewModel.attendanceHistory.collectAsState().value,&#10;                            onEdit = {&#10;                                editingSubject = subject&#10;                                showDialog = true&#10;                            },&#10;                            onDeleteSuccess = { msg -&gt; errorMessage = msg },&#10;                            onEditAttendance = {&#10;                                editingSubject = subject&#10;                                attendedClasses = subject.attendedClasses&#10;                                totalClasses = subject.totalClasses&#10;                                showEditDialog = true&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (showDialog) {&#10;                AddOrEditSubjectDialog(&#10;                    initialSubject = editingSubject,&#10;                    onAdd = { name, type, threshold -&gt;&#10;                        coroutineScope.launch {&#10;                            val trimmedName = name.trim()&#10;                            when {&#10;                                trimmedName.isEmpty() -&gt; errorMessage = &quot;Name cannot be empty.&quot;&#10;                                subjects.any { it.name.equals(trimmedName, ignoreCase = true) } -&gt; errorMessage = &quot;Subject with this name already exists.&quot;&#10;                                else -&gt; try {&#10;                                    viewModel.addSubject(Subject(name = trimmedName, type = type, threshold = threshold))&#10;                                    showDialog = false&#10;                                    errorMessage = &quot;Subject added&quot;&#10;                                } catch (e: Exception) {&#10;                                    errorMessage = &quot;Failed to add subject&quot;&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onUpdate = { updatedSubject -&gt;&#10;                        coroutineScope.launch {&#10;                            val trimmedName = updatedSubject.name.trim()&#10;                            if (trimmedName.isEmpty() ||&#10;                                subjects.any { it.name.equals(trimmedName, ignoreCase = true) &amp;&amp; it.id != updatedSubject.id }) {&#10;                                errorMessage = &quot;Another subject with this name already exists.&quot;&#10;                            } else {&#10;                                try {&#10;                                    viewModel.updateSubject(updatedSubject.copy(name = trimmedName))&#10;                                    showDialog = false&#10;                                    errorMessage = &quot;Subject updated&quot;&#10;                                } catch (e: Exception) {&#10;                                    errorMessage = &quot;Failed to update subject&quot;&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onDismiss = { showDialog = false }&#10;                )&#10;            }&#10;&#10;            if (showEditDialog &amp;&amp; editingSubject != null) {&#10;                AlertDialog(&#10;                    onDismissRequest = { showEditDialog = false },&#10;                    title = { Text(&quot;Edit Attendance for ${editingSubject!!.name}&quot;) },&#10;                    text = {&#10;                        Column {&#10;                            OutlinedTextField(&#10;                                value = attendedClasses.toString(),&#10;                                onValueChange = { attendedClasses = it.toIntOrNull() ?: 0 },&#10;                                label = { Text(&quot;Attended Classes&quot;) }&#10;                            )&#10;                            OutlinedTextField(&#10;                                value = totalClasses.toString(),&#10;                                onValueChange = { totalClasses = it.toIntOrNull() ?: 0 },&#10;                                label = { Text(&quot;Total Classes&quot;) }&#10;                            )&#10;                        }&#10;                    },&#10;                    confirmButton = {&#10;                        Button(onClick = {&#10;                            coroutineScope.launch {&#10;                                attendanceViewModel.updateManualAttendance(&#10;                                    editingSubject!!.id,&#10;                                    attendedClasses,&#10;                                    totalClasses,&#10;                                    note = &quot;Manual record updated&quot;,&#10;                                    date = today&#10;                                )&#10;                                errorMessage = &quot;Attendance record updated manually&quot;&#10;                            }&#10;                            showEditDialog = false&#10;                        }) {&#10;                            Text(&quot;Save&quot;)&#10;                        }&#10;                    },&#10;                    dismissButton = {&#10;                        Button(onClick = { showEditDialog = false }) {&#10;                            Text(&quot;Cancel&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;&#10;            if (showExportDialog) {&#10;                AlertDialog(&#10;                    onDismissRequest = { showExportDialog = false },&#10;                    title = { Text(&quot;Export Attendance Report&quot;) },&#10;                    text = {&#10;                        var expanded by remember { mutableStateOf(false) }&#10;                        Column(modifier = Modifier.fillMaxWidth()) {&#10;                            Text(&quot;Select file type:&quot;)&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Surface(&#10;                                tonalElevation = 2.dp,&#10;                                shape = MaterialTheme.shapes.medium,&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                                ) {&#10;                                    exportTypes.forEach { type -&gt;&#10;                                        val isSelected = selectedExportType == type&#10;                                        Button(&#10;                                            onClick = { selectedExportType = type },&#10;                                            colors = if (isSelected) ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)&#10;                                                     else ButtonDefaults.buttonColors(),&#10;                                            modifier = Modifier.weight(1f).padding(horizontal = 4.dp)&#10;                                        ) {&#10;                                            Text(type)&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    confirmButton = {&#10;                        Button(onClick = {&#10;                            showExportDialog = false&#10;                            val fileName = &quot;attendance_export_${LocalDateTime.now()}&quot;&#10;                            when (selectedExportType) {&#10;                                &quot;CSV&quot; -&gt; exportCsvLauncher.launch(&quot;$fileName.csv&quot;)&#10;                                &quot;Excel&quot; -&gt; exportExcelLauncher.launch(&quot;$fileName.xlsx&quot;)&#10;                                &quot;PDF&quot; -&gt; exportPdfLauncher.launch(&quot;$fileName.pdf&quot;)&#10;                            }&#10;                        }) {&#10;                            Text(&quot;Export&quot;)&#10;                        }&#10;                    },&#10;                    dismissButton = {&#10;                        OutlinedButton(onClick = { showExportDialog = false }) {&#10;                            Text(&quot;Cancel&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SubjectCard(&#10;    subject: Subject,&#10;    viewModel: SubjectViewModel,&#10;    attendanceViewModel: AttendanceViewModel,&#10;    today: String,&#10;    attendanceHistory: List&lt;Attendance&gt;, // Explicitly typed&#10;    onEdit: () -&gt; Unit,&#10;    onDeleteSuccess: (String) -&gt; Unit,&#10;    onEditAttendance: () -&gt; Unit&#10;) {&#10;    val attendancePercentage = if (subject.totalClasses &gt; 0) {&#10;        subject.attendedClasses * 100.0 / subject.totalClasses&#10;    } else {&#10;        0.0&#10;    }&#10;    val localCoroutineScope = rememberCoroutineScope()&#10;&#10;    LaunchedEffect(subject.id) {&#10;        attendanceViewModel.loadAttendance(subject.id)&#10;    }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(8.dp)&#10;            .clickable { onEdit() },&#10;        elevation = CardDefaults.cardElevation(2.dp)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(subject.name, style = MaterialTheme.typography.titleMedium)&#10;                    Text(subject.type, style = MaterialTheme.typography.bodyMedium)&#10;                    Text(&quot;Threshold: ${subject.threshold}%&quot;, style = MaterialTheme.typography.bodySmall)&#10;                    Text(&quot;Attended: ${subject.attendedClasses} / Total: ${subject.totalClasses}&quot;, style = MaterialTheme.typography.bodySmall)&#10;&#10;                    val attended = subject.attendedClasses&#10;                    val total = subject.totalClasses&#10;                    val threshold = subject.threshold&#10;                    val attendancePercent = if (total &gt; 0) attended * 100 / total else 0&#10;                    val thresholdPercent = threshold&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Box(modifier = Modifier.fillMaxWidth().height(20.dp)) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxSize()&#10;                                .background(MaterialTheme.colorScheme.secondary.copy(alpha = 0.5f))&#10;                        )&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxHeight()&#10;                                .fillMaxWidth(fraction = thresholdPercent / 100f)&#10;                                .background(MaterialTheme.colorScheme.error.copy(alpha = 0.75f))&#10;                        )&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxHeight()&#10;                                .fillMaxWidth(fraction = attendancePercent / 100f)&#10;                                .background(MaterialTheme.colorScheme.primary)&#10;                        )&#10;                    }&#10;                }&#10;                var showDeleteDialog by remember { mutableStateOf(false) }&#10;                IconButton(onClick = { showDeleteDialog = true }) {&#10;                    Icon(Icons.Default.Delete, contentDescription = &quot;Delete&quot;)&#10;                }&#10;                if (showDeleteDialog) {&#10;                    AlertDialog(&#10;                        onDismissRequest = { showDeleteDialog = false },&#10;                        title = { Text(&quot;Delete Subject&quot;) },&#10;                        text = { Text(&quot;Are you sure you want to delete this subject? This action cannot be undone.&quot;) },&#10;                        confirmButton = {&#10;                            Button(onClick = {&#10;                                showDeleteDialog = false&#10;                                localCoroutineScope.launch {&#10;                                    viewModel.deleteSubject(subject)&#10;                                    onDeleteSuccess(&quot;Subject deleted&quot;)&#10;                                }&#10;                            }) { Text(&quot;Delete&quot;) }&#10;                        },&#10;                        dismissButton = {&#10;                            Button(onClick = { showDeleteDialog = false }) { Text(&quot;Cancel&quot;) }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&quot;Attendance: ${&quot;%.1f&quot;.format(attendancePercentage)}%&quot;, style = MaterialTheme.typography.bodyMedium)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&quot;History:&quot;, style = MaterialTheme.typography.titleSmall)&#10;            if (attendanceHistory.isEmpty()) {&#10;                Text(&quot;No attendance records yet.&quot;, style = MaterialTheme.typography.bodySmall)&#10;            } else {&#10;                attendanceHistory.take(5).forEach { record -&gt;&#10;                    val statusText = if (record.note != null &amp;&amp; record.note.contains(&quot;Manual record updated&quot;)) &quot;Updated&quot; else record.status.name&#10;                    Text(&quot;${record.date}: $statusText&quot;, style = MaterialTheme.typography.bodySmall)&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Button(onClick = onEditAttendance) {&#10;                Text(&quot;Edit Attendance&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun buildCsv(subjects: List&lt;Subject&gt;): String {&#10;    val header = &quot;Subject,Type,Threshold,Attended,Total,Percentage\n&quot;&#10;    val rows = subjects.joinToString(&quot;\n&quot;) {&#10;        val percentage = if (it.totalClasses &gt; 0) (it.attendedClasses * 100.0 / it.totalClasses) else 0.0&#10;        &quot;${it.name},${it.type},${it.threshold},${it.attendedClasses},${it.totalClasses},${&quot;%.2f&quot;.format(percentage)}&quot;&#10;    }&#10;    return header + rows&#10;}&#10;&#10;fun buildExcel(subjects: List&lt;Subject&gt;): ByteArray {&#10;    val workbook = XSSFWorkbook()&#10;    val sheet = workbook.createSheet(&quot;Attendance&quot;)&#10;    val header = listOf(&quot;Subject&quot;, &quot;Type&quot;, &quot;Threshold&quot;, &quot;Attended&quot;, &quot;Total&quot;, &quot;Percentage&quot;)&#10;    val headerRow = sheet.createRow(0)&#10;    header.forEachIndexed { idx, title -&gt;&#10;        val cell = headerRow.createCell(idx, CellType.STRING)&#10;        cell.setCellValue(title)&#10;    }&#10;    subjects.forEachIndexed { rowIdx, subject -&gt;&#10;        val row = sheet.createRow(rowIdx + 1)&#10;        row.createCell(0, CellType.STRING).setCellValue(subject.name)&#10;        row.createCell(1, CellType.STRING).setCellValue(subject.type)&#10;        row.createCell(2, CellType.NUMERIC).setCellValue(subject.threshold.toDouble())&#10;        row.createCell(3, CellType.NUMERIC).setCellValue(subject.attendedClasses.toDouble())&#10;        row.createCell(4, CellType.NUMERIC).setCellValue(subject.totalClasses.toDouble())&#10;        val percentage = if (subject.totalClasses &gt; 0) (subject.attendedClasses * 100.0 / subject.totalClasses) else 0.0&#10;        row.createCell(5, CellType.NUMERIC).setCellValue(percentage)&#10;    }&#10;    val out = java.io.ByteArrayOutputStream()&#10;    workbook.write(out)&#10;    workbook.close()&#10;    return out.toByteArray()&#10;}&#10;&#10;fun buildPdf(context: android.content.Context, subjects: List&lt;Subject&gt;): ByteArray {&#10;    val pdfDocument = PdfDocument()&#10;    val pageInfo = PdfDocument.PageInfo.Builder(595, 842, 1).create() // A4 size&#10;    var pageNumber = 1&#10;    var y = 150f&#10;    var page = pdfDocument.startPage(pageInfo)&#10;    val canvas = page.canvas&#10;    val paint = Paint()&#10;    paint.textSize = 18f&#10;    paint.isFakeBoldText = true&#10;&#10;    // Load the image from drawable resources&#10;    val bitmap = android.graphics.BitmapFactory.decodeResource(context.resources, com.example.attendance_tracker.R.drawable.ic_launcher_playstore)&#10;    if (bitmap != null) {&#10;        // Draw the image at the top left, scaled to 48x48 px&#10;        canvas.drawBitmap(bitmap, null, android.graphics.Rect(40, 40, 88, 88), null)&#10;        // Draw header text next to the image&#10;        canvas.drawText(&quot;Attendance Report&quot;, 100f, 70f, paint)&#10;    } else {&#10;        // Fallback: just draw the header text&#10;        canvas.drawText(&quot;Attendance Report&quot;, 40f, 70f, paint)&#10;    }&#10;    paint.textSize = 16f&#10;    paint.isFakeBoldText = false&#10;    val header = listOf(&quot;Subject&quot;, &quot;Type&quot;, &quot;Threshold&quot;, &quot;Attended&quot;, &quot;Total&quot;, &quot;Percentage&quot;)&#10;    val colWidths = listOf(120, 80, 80, 80, 80, 100)&#10;    var x = 40f&#10;    // Draw table header&#10;    header.forEachIndexed { idx, title -&gt;&#10;        canvas.drawText(title, x, y, paint)&#10;        x += colWidths[idx]&#10;    }&#10;    // Draw header line&#10;    canvas.drawLine(40f, y + 6f, 540f, y + 6f, paint)&#10;    y += 40f&#10;    paint.textSize = 14f&#10;    subjects.forEach {&#10;        x = 40f&#10;        val percentage = if (it.totalClasses &gt; 0) (it.attendedClasses * 100.0 / it.totalClasses) else 0.0&#10;        val row = listOf(&#10;            it.name,&#10;            it.type,&#10;            it.threshold.toString(),&#10;            it.attendedClasses.toString(),&#10;            it.totalClasses.toString(),&#10;            &quot;%.2f&quot;.format(percentage) + &quot;%&quot;&#10;        )&#10;        row.forEachIndexed { idx, cell -&gt;&#10;            canvas.drawText(cell, x, y, paint)&#10;            x += colWidths[idx]&#10;        }&#10;        // Draw row line&#10;        canvas.drawLine(40f, y + 6f, 540f, y + 6f, paint)&#10;        y += 36f // Increased spacing between lines (was 24f)&#10;        if (y &gt; 800f) {&#10;            pdfDocument.finishPage(page)&#10;            pageNumber++&#10;            page = pdfDocument.startPage(PdfDocument.PageInfo.Builder(595, 842, pageNumber).create())&#10;            y = 60f&#10;            page.canvas.drawText(&quot;Attendance Report&quot;, 40f, 40f, paint)&#10;            paint.textSize = 16f&#10;            x = 40f&#10;            header.forEachIndexed { idx, title -&gt;&#10;                page.canvas.drawText(title, x, y, paint)&#10;                x += colWidths[idx]&#10;            }&#10;            page.canvas.drawLine(40f, y + 6f, 540f, y + 6f, paint)&#10;            y += 30f&#10;            paint.textSize = 14f&#10;        }&#10;    }&#10;    pdfDocument.finishPage(page)&#10;    val out = java.io.ByteArrayOutputStream()&#10;    pdfDocument.writeTo(out)&#10;    pdfDocument.close()&#10;    return out.toByteArray()&#10;}" />
              <option name="updatedContent" value="package com.example.attendance_tracker.ui.screens&#10;&#10;import android.graphics.Paint&#10;import android.graphics.pdf.PdfDocument&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.material.icons.filled.Download&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.attendance_tracker.data.*&#10;import com.example.attendance_tracker.ui.components.AddOrEditSubjectDialog&#10;import com.example.attendance_tracker.viewmodel.SubjectViewModel&#10;import com.example.attendance_tracker.viewmodel.SubjectViewModelFactory&#10;import com.example.attendance_tracker.viewmodel.AttendanceViewModel&#10;import kotlinx.coroutines.launch&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.util.Locale&#10;import org.apache.poi.xssf.usermodel.XSSFWorkbook&#10;import org.apache.poi.ss.usermodel.CellType&#10;import org.apache.poi.ss.usermodel.Row&#10;import java.time.LocalDateTime&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SubjectsScreen(&#10;    repository: SubjectRepository,&#10;    attendanceViewModel: AttendanceViewModel&#10;) {&#10;    val context = LocalContext.current&#10;    val viewModel: SubjectViewModel = viewModel(factory = SubjectViewModelFactory(repository))&#10;    val subjects by viewModel.subjects.collectAsState()&#10;    var showDialog by remember { mutableStateOf(false) }&#10;    var showEditDialog by remember { mutableStateOf(false) }&#10;    var editingSubject by remember { mutableStateOf&lt;Subject?&gt;(null) }&#10;    var attendedClasses by remember { mutableStateOf(0) }&#10;    var totalClasses by remember { mutableStateOf(0) }&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val dateFormatter = DateTimeFormatter.ofPattern(&quot;dd-MM-yyyy&quot;, Locale.getDefault())&#10;    val today = LocalDate.now().format(dateFormatter)&#10;&#10;    // Search bar state&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    val filteredSubjects = subjects.filter { it.name.contains(searchQuery, ignoreCase = true) }&#10;&#10;    LaunchedEffect(errorMessage) {&#10;        errorMessage?.let {&#10;            snackbarHostState.showSnackbar(it)&#10;            errorMessage = null&#10;        }&#10;    }&#10;&#10;    // Export state&#10;    var showExportDialog by remember { mutableStateOf(false) }&#10;    var selectedExportType by remember { mutableStateOf(&quot;CSV&quot;) }&#10;    val exportTypes = listOf(&quot;CSV&quot;, &quot;Excel&quot;, &quot;PDF&quot;)&#10;&#10;    // Export launchers&#10;    val exportCsvLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.CreateDocument(&quot;text/csv&quot;),&#10;        onResult = { uri: android.net.Uri? -&gt;&#10;            if (uri != null) {&#10;                coroutineScope.launch {&#10;                    val csv = buildCsv(filteredSubjects)&#10;                    context.contentResolver.openOutputStream(uri)?.use { it.write(csv.toByteArray()) }&#10;                }&#10;            }&#10;        }&#10;    )&#10;    val exportExcelLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.CreateDocument(&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;),&#10;        onResult = { uri: android.net.Uri? -&gt;&#10;            if (uri != null) {&#10;                coroutineScope.launch {&#10;                    val excelBytes = buildExcel(filteredSubjects)&#10;                    context.contentResolver.openOutputStream(uri)?.use { it.write(excelBytes) }&#10;                }&#10;            }&#10;        }&#10;    )&#10;    val exportPdfLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.CreateDocument(&quot;application/pdf&quot;),&#10;        onResult = { uri: android.net.Uri? -&gt;&#10;            if (uri != null) {&#10;                coroutineScope.launch {&#10;                    val pdfBytes = buildPdf(context, filteredSubjects)&#10;                    context.contentResolver.openOutputStream(uri)?.use { it.write(pdfBytes) }&#10;                }&#10;            }&#10;        }&#10;    )&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Subjects&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* Handle back navigation */ }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { showDialog = true }) {&#10;                        Icon(Icons.Default.Add, contentDescription = &quot;Add Subject&quot;)&#10;                    }&#10;                    IconButton(onClick = { showExportDialog = true }) {&#10;                        Icon(Icons.Default.Download, contentDescription = &quot;Export&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(hostState = snackbarHostState) }&#10;    ) { innerPadding -&gt;&#10;        Column(modifier = Modifier.fillMaxSize().padding(innerPadding)) {&#10;            // Search bar&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Search Subjects&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(8.dp),&#10;                shape = MaterialTheme.shapes.medium, // Rounded rectangle shape&#10;                singleLine = true // Single-line input for a sleek look&#10;            )&#10;&#10;            if (filteredSubjects.isEmpty()) {&#10;                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                    Text(&quot;No subjects found.&quot;)&#10;                }&#10;            } else {&#10;                LazyColumn(modifier = Modifier.fillMaxSize()) {&#10;                    items(filteredSubjects) { subject -&gt;&#10;                        SubjectCard(&#10;                            subject = subject,&#10;                            viewModel = viewModel,&#10;                            attendanceViewModel = attendanceViewModel,&#10;                            today = today,&#10;                            attendanceHistory = attendanceViewModel.attendanceHistory.collectAsState().value,&#10;                            onEdit = {&#10;                                editingSubject = subject&#10;                                showDialog = true&#10;                            },&#10;                            onDeleteSuccess = { msg -&gt; errorMessage = msg },&#10;                            onEditAttendance = {&#10;                                editingSubject = subject&#10;                                attendedClasses = subject.attendedClasses&#10;                                totalClasses = subject.totalClasses&#10;                                showEditDialog = true&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (showDialog) {&#10;                AddOrEditSubjectDialog(&#10;                    initialSubject = editingSubject,&#10;                    onAdd = { name, type, threshold -&gt;&#10;                        coroutineScope.launch {&#10;                            val trimmedName = name.trim()&#10;                            when {&#10;                                trimmedName.isEmpty() -&gt; errorMessage = &quot;Name cannot be empty.&quot;&#10;                                subjects.any { it.name.equals(trimmedName, ignoreCase = true) } -&gt; errorMessage = &quot;Subject with this name already exists.&quot;&#10;                                else -&gt; try {&#10;                                    viewModel.addSubject(Subject(name = trimmedName, type = type, threshold = threshold))&#10;                                    showDialog = false&#10;                                    errorMessage = &quot;Subject added&quot;&#10;                                } catch (e: Exception) {&#10;                                    errorMessage = &quot;Failed to add subject&quot;&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onUpdate = { updatedSubject -&gt;&#10;                        coroutineScope.launch {&#10;                            val trimmedName = updatedSubject.name.trim()&#10;                            if (trimmedName.isEmpty() ||&#10;                                subjects.any { it.name.equals(trimmedName, ignoreCase = true) &amp;&amp; it.id != updatedSubject.id }) {&#10;                                errorMessage = &quot;Another subject with this name already exists.&quot;&#10;                            } else {&#10;                                try {&#10;                                    viewModel.updateSubject(updatedSubject.copy(name = trimmedName))&#10;                                    showDialog = false&#10;                                    errorMessage = &quot;Subject updated&quot;&#10;                                } catch (e: Exception) {&#10;                                    errorMessage = &quot;Failed to update subject&quot;&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onDismiss = { showDialog = false }&#10;                )&#10;            }&#10;&#10;            if (showEditDialog &amp;&amp; editingSubject != null) {&#10;                AlertDialog(&#10;                    onDismissRequest = { showEditDialog = false },&#10;                    title = { Text(&quot;Edit Attendance for ${editingSubject!!.name}&quot;) },&#10;                    text = {&#10;                        Column {&#10;                            OutlinedTextField(&#10;                                value = attendedClasses.toString(),&#10;                                onValueChange = { attendedClasses = it.toIntOrNull() ?: 0 },&#10;                                label = { Text(&quot;Attended Classes&quot;) }&#10;                            )&#10;                            OutlinedTextField(&#10;                                value = totalClasses.toString(),&#10;                                onValueChange = { totalClasses = it.toIntOrNull() ?: 0 },&#10;                                label = { Text(&quot;Total Classes&quot;) }&#10;                            )&#10;                        }&#10;                    },&#10;                    confirmButton = {&#10;                        Button(onClick = {&#10;                            coroutineScope.launch {&#10;                                attendanceViewModel.updateManualAttendance(&#10;                                    editingSubject!!.id,&#10;                                    attendedClasses,&#10;                                    totalClasses,&#10;                                    note = &quot;Manual record updated&quot;,&#10;                                    date = today&#10;                                )&#10;                                errorMessage = &quot;Attendance record updated manually&quot;&#10;                            }&#10;                            showEditDialog = false&#10;                        }) {&#10;                            Text(&quot;Save&quot;)&#10;                        }&#10;                    },&#10;                    dismissButton = {&#10;                        Button(onClick = { showEditDialog = false }) {&#10;                            Text(&quot;Cancel&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;&#10;            if (showExportDialog) {&#10;                AlertDialog(&#10;                    onDismissRequest = { showExportDialog = false },&#10;                    title = { Text(&quot;Export Attendance Report&quot;) },&#10;                    text = {&#10;                        var expanded by remember { mutableStateOf(false) }&#10;                        Column(modifier = Modifier.fillMaxWidth()) {&#10;                            Text(&quot;Select file type:&quot;)&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Surface(&#10;                                tonalElevation = 2.dp,&#10;                                shape = MaterialTheme.shapes.medium,&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                                ) {&#10;                                    exportTypes.forEach { type -&gt;&#10;                                        val isSelected = selectedExportType == type&#10;                                        Button(&#10;                                            onClick = { selectedExportType = type },&#10;                                            colors = if (isSelected)&#10;                                                ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)&#10;                                            else&#10;                                                ButtonDefaults.outlinedButtonColors(containerColor = MaterialTheme.colorScheme.surface),&#10;                                            modifier = Modifier.weight(1f).padding(horizontal = 4.dp)&#10;                                        ) {&#10;                                            Text(type, color = if (isSelected) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurface)&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    confirmButton = {&#10;                        Button(onClick = {&#10;                            showExportDialog = false&#10;                            val fileName = &quot;attendance_export_${LocalDateTime.now()}&quot;&#10;                            when (selectedExportType) {&#10;                                &quot;CSV&quot; -&gt; exportCsvLauncher.launch(&quot;$fileName.csv&quot;)&#10;                                &quot;Excel&quot; -&gt; exportExcelLauncher.launch(&quot;$fileName.xlsx&quot;)&#10;                                &quot;PDF&quot; -&gt; exportPdfLauncher.launch(&quot;$fileName.pdf&quot;)&#10;                            }&#10;                        }) {&#10;                            Text(&quot;Export&quot;)&#10;                        }&#10;                    },&#10;                    dismissButton = {&#10;                        OutlinedButton(onClick = { showExportDialog = false }) {&#10;                            Text(&quot;Cancel&quot;)&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SubjectCard(&#10;    subject: Subject,&#10;    viewModel: SubjectViewModel,&#10;    attendanceViewModel: AttendanceViewModel,&#10;    today: String,&#10;    attendanceHistory: List&lt;Attendance&gt;, // Explicitly typed&#10;    onEdit: () -&gt; Unit,&#10;    onDeleteSuccess: (String) -&gt; Unit,&#10;    onEditAttendance: () -&gt; Unit&#10;) {&#10;    val attendancePercentage = if (subject.totalClasses &gt; 0) {&#10;        subject.attendedClasses * 100.0 / subject.totalClasses&#10;    } else {&#10;        0.0&#10;    }&#10;    val localCoroutineScope = rememberCoroutineScope()&#10;&#10;    LaunchedEffect(subject.id) {&#10;        attendanceViewModel.loadAttendance(subject.id)&#10;    }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(8.dp)&#10;            .clickable { onEdit() },&#10;        elevation = CardDefaults.cardElevation(2.dp)&#10;    ) {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(subject.name, style = MaterialTheme.typography.titleMedium)&#10;                    Text(subject.type, style = MaterialTheme.typography.bodyMedium)&#10;                    Text(&quot;Threshold: ${subject.threshold}%&quot;, style = MaterialTheme.typography.bodySmall)&#10;                    Text(&quot;Attended: ${subject.attendedClasses} / Total: ${subject.totalClasses}&quot;, style = MaterialTheme.typography.bodySmall)&#10;&#10;                    val attended = subject.attendedClasses&#10;                    val total = subject.totalClasses&#10;                    val threshold = subject.threshold&#10;                    val attendancePercent = if (total &gt; 0) attended * 100 / total else 0&#10;                    val thresholdPercent = threshold&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Box(modifier = Modifier.fillMaxWidth().height(20.dp)) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxSize()&#10;                                .background(MaterialTheme.colorScheme.secondary.copy(alpha = 0.5f))&#10;                        )&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxHeight()&#10;                                .fillMaxWidth(fraction = thresholdPercent / 100f)&#10;                                .background(MaterialTheme.colorScheme.error.copy(alpha = 0.75f))&#10;                        )&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxHeight()&#10;                                .fillMaxWidth(fraction = attendancePercent / 100f)&#10;                                .background(MaterialTheme.colorScheme.primary)&#10;                        )&#10;                    }&#10;                }&#10;                var showDeleteDialog by remember { mutableStateOf(false) }&#10;                IconButton(onClick = { showDeleteDialog = true }) {&#10;                    Icon(Icons.Default.Delete, contentDescription = &quot;Delete&quot;)&#10;                }&#10;                if (showDeleteDialog) {&#10;                    AlertDialog(&#10;                        onDismissRequest = { showDeleteDialog = false },&#10;                        title = { Text(&quot;Delete Subject&quot;) },&#10;                        text = { Text(&quot;Are you sure you want to delete this subject? This action cannot be undone.&quot;) },&#10;                        confirmButton = {&#10;                            Button(onClick = {&#10;                                showDeleteDialog = false&#10;                                localCoroutineScope.launch {&#10;                                    viewModel.deleteSubject(subject)&#10;                                    onDeleteSuccess(&quot;Subject deleted&quot;)&#10;                                }&#10;                            }) { Text(&quot;Delete&quot;) }&#10;                        },&#10;                        dismissButton = {&#10;                            Button(onClick = { showDeleteDialog = false }) { Text(&quot;Cancel&quot;) }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&quot;Attendance: ${&quot;%.1f&quot;.format(attendancePercentage)}%&quot;, style = MaterialTheme.typography.bodyMedium)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&quot;History:&quot;, style = MaterialTheme.typography.titleSmall)&#10;            if (attendanceHistory.isEmpty()) {&#10;                Text(&quot;No attendance records yet.&quot;, style = MaterialTheme.typography.bodySmall)&#10;            } else {&#10;                attendanceHistory.take(5).forEach { record -&gt;&#10;                    val statusText = if (record.note != null &amp;&amp; record.note.contains(&quot;Manual record updated&quot;)) &quot;Updated&quot; else record.status.name&#10;                    Text(&quot;${record.date}: $statusText&quot;, style = MaterialTheme.typography.bodySmall)&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Button(onClick = onEditAttendance) {&#10;                Text(&quot;Edit Attendance&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun buildCsv(subjects: List&lt;Subject&gt;): String {&#10;    val header = &quot;Subject,Type,Threshold,Attended,Total,Percentage\n&quot;&#10;    val rows = subjects.joinToString(&quot;\n&quot;) {&#10;        val percentage = if (it.totalClasses &gt; 0) (it.attendedClasses * 100.0 / it.totalClasses) else 0.0&#10;        &quot;${it.name},${it.type},${it.threshold},${it.attendedClasses},${it.totalClasses},${&quot;%.2f&quot;.format(percentage)}&quot;&#10;    }&#10;    return header + rows&#10;}&#10;&#10;fun buildExcel(subjects: List&lt;Subject&gt;): ByteArray {&#10;    val workbook = XSSFWorkbook()&#10;    val sheet = workbook.createSheet(&quot;Attendance&quot;)&#10;    val header = listOf(&quot;Subject&quot;, &quot;Type&quot;, &quot;Threshold&quot;, &quot;Attended&quot;, &quot;Total&quot;, &quot;Percentage&quot;)&#10;    val headerRow = sheet.createRow(0)&#10;    header.forEachIndexed { idx, title -&gt;&#10;        val cell = headerRow.createCell(idx, CellType.STRING)&#10;        cell.setCellValue(title)&#10;    }&#10;    subjects.forEachIndexed { rowIdx, subject -&gt;&#10;        val row = sheet.createRow(rowIdx + 1)&#10;        row.createCell(0, CellType.STRING).setCellValue(subject.name)&#10;        row.createCell(1, CellType.STRING).setCellValue(subject.type)&#10;        row.createCell(2, CellType.NUMERIC).setCellValue(subject.threshold.toDouble())&#10;        row.createCell(3, CellType.NUMERIC).setCellValue(subject.attendedClasses.toDouble())&#10;        row.createCell(4, CellType.NUMERIC).setCellValue(subject.totalClasses.toDouble())&#10;        val percentage = if (subject.totalClasses &gt; 0) (subject.attendedClasses * 100.0 / subject.totalClasses) else 0.0&#10;        row.createCell(5, CellType.NUMERIC).setCellValue(percentage)&#10;    }&#10;    val out = java.io.ByteArrayOutputStream()&#10;    workbook.write(out)&#10;    workbook.close()&#10;    return out.toByteArray()&#10;}&#10;&#10;fun buildPdf(context: android.content.Context, subjects: List&lt;Subject&gt;): ByteArray {&#10;    val pdfDocument = PdfDocument()&#10;    val pageInfo = PdfDocument.PageInfo.Builder(595, 842, 1).create() // A4 size&#10;    var pageNumber = 1&#10;    var y = 150f&#10;    var page = pdfDocument.startPage(pageInfo)&#10;    val canvas = page.canvas&#10;    val paint = Paint()&#10;    paint.textSize = 18f&#10;    paint.isFakeBoldText = true&#10;&#10;    // Load the image from drawable resources&#10;    val bitmap = android.graphics.BitmapFactory.decodeResource(context.resources, com.example.attendance_tracker.R.drawable.ic_launcher_playstore)&#10;    if (bitmap != null) {&#10;        // Draw the image at the top left, scaled to 48x48 px&#10;        canvas.drawBitmap(bitmap, null, android.graphics.Rect(40, 40, 88, 88), null)&#10;        // Draw header text next to the image&#10;        canvas.drawText(&quot;Attendance Report&quot;, 100f, 70f, paint)&#10;    } else {&#10;        // Fallback: just draw the header text&#10;        canvas.drawText(&quot;Attendance Report&quot;, 40f, 70f, paint)&#10;    }&#10;    paint.textSize = 16f&#10;    paint.isFakeBoldText = false&#10;    val header = listOf(&quot;Subject&quot;, &quot;Type&quot;, &quot;Threshold&quot;, &quot;Attended&quot;, &quot;Total&quot;, &quot;Percentage&quot;)&#10;    val colWidths = listOf(120, 80, 80, 80, 80, 100)&#10;    var x = 40f&#10;    // Draw table header&#10;    header.forEachIndexed { idx, title -&gt;&#10;        canvas.drawText(title, x, y, paint)&#10;        x += colWidths[idx]&#10;    }&#10;    // Draw header line&#10;    canvas.drawLine(40f, y + 6f, 540f, y + 6f, paint)&#10;    y += 40f&#10;    paint.textSize = 14f&#10;    subjects.forEach {&#10;        x = 40f&#10;        val percentage = if (it.totalClasses &gt; 0) (it.attendedClasses * 100.0 / it.totalClasses) else 0.0&#10;        val row = listOf(&#10;            it.name,&#10;            it.type,&#10;            it.threshold.toString(),&#10;            it.attendedClasses.toString(),&#10;            it.totalClasses.toString(),&#10;            &quot;%.2f&quot;.format(percentage) + &quot;%&quot;&#10;        )&#10;        row.forEachIndexed { idx, cell -&gt;&#10;            canvas.drawText(cell, x, y, paint)&#10;            x += colWidths[idx]&#10;        }&#10;        // Draw row line&#10;        canvas.drawLine(40f, y + 6f, 540f, y + 6f, paint)&#10;        y += 36f // Increased spacing between lines (was 24f)&#10;        if (y &gt; 800f) {&#10;            pdfDocument.finishPage(page)&#10;            pageNumber++&#10;            page = pdfDocument.startPage(PdfDocument.PageInfo.Builder(595, 842, pageNumber).create())&#10;            y = 60f&#10;            page.canvas.drawText(&quot;Attendance Report&quot;, 40f, 40f, paint)&#10;            paint.textSize = 16f&#10;            x = 40f&#10;            header.forEachIndexed { idx, title -&gt;&#10;                page.canvas.drawText(title, x, y, paint)&#10;                x += colWidths[idx]&#10;            }&#10;            page.canvas.drawLine(40f, y + 6f, 540f, y + 6f, paint)&#10;            y += 30f&#10;            paint.textSize = 14f&#10;        }&#10;    }&#10;    pdfDocument.finishPage(page)&#10;    val out = java.io.ByteArrayOutputStream()&#10;    pdfDocument.writeTo(out)&#10;    pdfDocument.close()&#10;    return out.toByteArray()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lol/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lol/MainActivity.kt" />
              <option name="originalContent" value="package com.example.lol&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.example.lol.ui.navigation.AppNavHost&#10;import com.example.lol.ui.navigation.BottomNavItem&#10;import com.example.lol.ui.theme.LOLTheme&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.School&#10;import androidx.compose.material.icons.filled.List&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.room.Room&#10;import com.example.lol.data.AppDatabase&#10;import com.example.lol.data.SubjectRepository&#10;import com.example.lol.repository.TimetableRepository&#10;import com.example.lol.viewmodel.TimetableViewModel&#10;import com.example.lol.viewmodel.TimetableViewModelFactory&#10;import androidx.compose.runtime.remember&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            LOLTheme {&#10;                val navController = rememberNavController()&#10;                val context = this&#10;                val db = remember {&#10;                    Room.databaseBuilder(&#10;                        context.applicationContext,&#10;                        AppDatabase::class.java,&#10;                        &quot;attendance_db&quot;&#10;                    )&#10;                    .fallbackToDestructiveMigration()&#10;                    .build()&#10;                }&#10;                val repository = remember { SubjectRepository(db.subjectDao()) }&#10;                val timetableRepository = remember { TimetableRepository(db.timetableDao()) }&#10;                val timetableViewModel: TimetableViewModel = androidx.lifecycle.viewmodel.compose.viewModel(&#10;                    factory = TimetableViewModelFactory(timetableRepository)&#10;                )&#10;                val items = listOf(&#10;                    BottomNavItem.Home,&#10;                    BottomNavItem.Subjects,&#10;                    BottomNavItem.Timetable,&#10;                    BottomNavItem.CommonSlots&#10;                )&#10;                val commonSlotViewModel: com.example.lol.viewmodel.CommonSlotViewModel = androidx.lifecycle.viewmodel.compose.viewModel()&#10;                // Always call insertDefaultSlotsIfEmpty; it only inserts if table is empty&#10;                commonSlotViewModel.insertDefaultSlotsIfEmpty()&#10;                val attendanceRepository = remember { com.example.lol.repository.AttendanceRepository(db.attendanceDao(), db.subjectDao()) }&#10;                val attendanceViewModel = remember { com.example.lol.viewmodel.AttendanceViewModel(attendanceRepository) }&#10;                Scaffold(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    bottomBar = {&#10;                        NavigationBar {&#10;                            val currentRoute = navController.currentBackStackEntry?.destination?.route&#10;                            items.forEach { item -&gt;&#10;                                NavigationBarItem(&#10;                                    icon = { Icon(item.icon, contentDescription = item.label) },&#10;                                    label = { Text(item.label) },&#10;                                    selected = currentRoute == item.route,&#10;                                    onClick = {&#10;                                        if (currentRoute != item.route) {&#10;                                            navController.navigate(item.route) {&#10;                                                popUpTo(navController.graph.startDestinationId) { saveState = true }&#10;                                                launchSingleTop = true&#10;                                                restoreState = true&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                ) { innerPadding -&gt;&#10;                    AppNavHost(&#10;                        navController = navController,&#10;                        repository = repository,&#10;                        timetableViewModel = timetableViewModel,&#10;                        commonSlotViewModel = commonSlotViewModel,&#10;                        attendanceViewModel = attendanceViewModel,&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lol&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.example.lol.ui.navigation.AppNavHost&#10;import com.example.lol.ui.navigation.BottomNavItem&#10;import com.example.lol.ui.theme.LOLTheme&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.School&#10;import androidx.compose.material.icons.filled.List&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.room.Room&#10;import com.example.lol.data.AppDatabase&#10;import com.example.lol.data.SubjectRepository&#10;import com.example.lol.repository.TimetableRepository&#10;import com.example.lol.viewmodel.TimetableViewModel&#10;import com.example.lol.viewmodel.TimetableViewModelFactory&#10;import androidx.compose.runtime.remember&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            LOLTheme {&#10;                val navController = rememberNavController()&#10;                val context = this&#10;                val db = remember {&#10;                    Room.databaseBuilder(&#10;                        context.applicationContext,&#10;                        AppDatabase::class.java,&#10;                        &quot;attendance_db&quot;&#10;                    )&#10;                    .fallbackToDestructiveMigration()&#10;                    .build()&#10;                }&#10;                val repository = remember { SubjectRepository(db.subjectDao()) }&#10;                val timetableRepository = remember { TimetableRepository(db.timetableDao()) }&#10;                val timetableViewModel: TimetableViewModel = androidx.lifecycle.viewmodel.compose.viewModel(&#10;                    factory = TimetableViewModelFactory(timetableRepository)&#10;                )&#10;                val items = listOf(&#10;                    BottomNavItem.Home,&#10;                    BottomNavItem.Subjects,&#10;                    BottomNavItem.Timetable,&#10;                    BottomNavItem.CommonSlots&#10;                )&#10;                val commonSlotViewModel: com.example.lol.viewmodel.CommonSlotViewModel = androidx.lifecycle.viewmodel.compose.viewModel()&#10;                // Always call insertDefaultSlotsIfEmpty; it only inserts if table is empty&#10;                commonSlotViewModel.insertDefaultSlotsIfEmpty()&#10;                val attendanceRepository = remember { com.example.lol.repository.AttendanceRepository(db.attendanceDao(), db.subjectDao(), repository) }&#10;                val attendanceViewModel = remember { com.example.lol.viewmodel.AttendanceViewModel(attendanceRepository) }&#10;                Scaffold(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    bottomBar = {&#10;                        NavigationBar {&#10;                            val currentRoute = navController.currentBackStackEntry?.destination?.route&#10;                            items.forEach { item -&gt;&#10;                                NavigationBarItem(&#10;                                    icon = { Icon(item.icon, contentDescription = item.label) },&#10;                                    label = { Text(item.label) },&#10;                                    selected = currentRoute == item.route,&#10;                                    onClick = {&#10;                                        if (currentRoute != item.route) {&#10;                                            navController.navigate(item.route) {&#10;                                                popUpTo(navController.graph.startDestinationId) { saveState = true }&#10;                                                launchSingleTop = true&#10;                                                restoreState = true&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                ) { innerPadding -&gt;&#10;                    AppNavHost(&#10;                        navController = navController,&#10;                        repository = repository,&#10;                        timetableViewModel = timetableViewModel,&#10;                        commonSlotViewModel = commonSlotViewModel,&#10;                        attendanceViewModel = attendanceViewModel,&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lol/repository/AttendanceRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lol/repository/AttendanceRepository.kt" />
              <option name="originalContent" value="package com.example.lol.repository&#10;import com.example.lol.data.Attendance&#10;import com.example.lol.data.AttendanceDao&#10;import com.example.lol.data.AttendanceStatus&#10;import com.example.lol.data.SubjectRepository&#10;import com.example.lol.data.SubjectDao&#10;import com.example.lol.data.Subject&#10;&#10;class AttendanceRepository(private val attendanceDao: AttendanceDao, private val subjectDao: SubjectDao) {&#10;    suspend fun markAttendanceForSlot(subjectId: Int, slotId: Int, date: String, status: AttendanceStatus) {&#10;        val attendance = Attendance(subjectId = subjectId, slotId = slotId, date = date, status = status)&#10;        attendanceDao.insertAttendance(attendance)&#10;    }&#10;&#10;    suspend fun deleteAllAttendanceForSubject(subjectId: Int) {&#10;        attendanceDao.deleteAllForSubject(subjectId)&#10;    }&#10;&#10;    suspend fun getSubjectById(subjectId: Int): Subject? {&#10;        return subjectDao.getSubjectById(subjectId)&#10;    }&#10;    &#10;    suspend fun addManualHistory(subjectId: Int, date: String, note: String) {&#10;        val manual = Attendance(subjectId = subjectId, slotId = -1, date = date, status = AttendanceStatus.PRESENT, note = note)&#10;        attendanceDao.insertManualHistory(manual)&#10;    }&#10;&#10;    suspend fun updateSubjectAttendance(subjectId: Int, attended: Int, total: Int) {&#10;        val subject = subjectDao.getSubjectById(subjectId)&#10;        if (subject != null) {&#10;            val updated = subject.copy(attendedClasses = attended, totalClasses = total)&#10;            subjectDao.updateSubject(updated)&#10;            // Notify SubjectRepository to refresh subjects&#10;            SubjectRepository(subjectDao).refreshSubjects()&#10;        }&#10;    }&#10;&#10;    suspend fun getAttendanceHistory(subjectId: Int) = attendanceDao.getAttendanceForSubject(subjectId)&#10;&#10;    suspend fun getAttendanceForDate(subjectId: Int, date: String) = attendanceDao.getAttendanceForSubjectOnDate(subjectId, date)&#10;&#10;    suspend fun getAttendancePercentage(subjectId: Int): Double {&#10;        val total = attendanceDao.getTotalMarked(subjectId)&#10;        if (total == 0) return 0.0&#10;        val present = attendanceDao.getCountByStatus(subjectId, AttendanceStatus.PRESENT)&#10;        return (present.toDouble() / total) * 100&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.lol.repository&#10;import com.example.lol.data.Attendance&#10;import com.example.lol.data.AttendanceDao&#10;import com.example.lol.data.AttendanceStatus&#10;import com.example.lol.data.SubjectRepository&#10;import com.example.lol.data.SubjectDao&#10;import com.example.lol.data.Subject&#10;&#10;class AttendanceRepository(&#10;    private val attendanceDao: AttendanceDao,&#10;    private val subjectDao: SubjectDao,&#10;    private val subjectRepository: SubjectRepository // Injected shared instance&#10;) {&#10;    suspend fun markAttendanceForSlot(subjectId: Int, slotId: Int, date: String, status: AttendanceStatus) {&#10;        val attendance = Attendance(subjectId = subjectId, slotId = slotId, date = date, status = status)&#10;        attendanceDao.insertAttendance(attendance)&#10;    }&#10;&#10;    suspend fun deleteAllAttendanceForSubject(subjectId: Int) {&#10;        attendanceDao.deleteAllForSubject(subjectId)&#10;    }&#10;&#10;    suspend fun getSubjectById(subjectId: Int): Subject? {&#10;        return subjectDao.getSubjectById(subjectId)&#10;    }&#10;    &#10;    suspend fun addManualHistory(subjectId: Int, date: String, note: String) {&#10;        val manual = Attendance(subjectId = subjectId, slotId = -1, date = date, status = AttendanceStatus.PRESENT, note = note)&#10;        attendanceDao.insertManualHistory(manual)&#10;    }&#10;&#10;    suspend fun updateSubjectAttendance(subjectId: Int, attended: Int, total: Int) {&#10;        val subject = subjectDao.getSubjectById(subjectId)&#10;        if (subject != null) {&#10;            val updated = subject.copy(attendedClasses = attended, totalClasses = total)&#10;            subjectDao.updateSubject(updated)&#10;            // Notify shared SubjectRepository to refresh subjects&#10;            subjectRepository.refreshSubjects()&#10;        }&#10;    }&#10;&#10;    suspend fun getAttendanceHistory(subjectId: Int) = attendanceDao.getAttendanceForSubject(subjectId)&#10;&#10;    suspend fun getAttendanceForDate(subjectId: Int, date: String) = attendanceDao.getAttendanceForSubjectOnDate(subjectId, date)&#10;&#10;    suspend fun getAttendancePercentage(subjectId: Int): Double {&#10;        val total = attendanceDao.getTotalMarked(subjectId)&#10;        if (total == 0) return 0.0&#10;        val present = attendanceDao.getCountByStatus(subjectId, AttendanceStatus.PRESENT)&#10;        return (present.toDouble() / total) * 100&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector&#10;    android:height=&quot;108dp&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:viewportHeight=&quot;108&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;path android:fillColor=&quot;#FFF3E0&quot;&#10;          android:pathData=&quot;M0,0h108v108h-108z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector&#10;    android:height=&quot;108dp&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:viewportHeight=&quot;108&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;path android:fillColor=&quot;#FFA726&quot;&#10;          android:pathData=&quot;M0,0h108v108h-108z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>